# Load the sample dataset
data <- read.csv('Tech_data.csv')
# Preprocess the data (if needed)
data$time <- as.Date(data$time)  # Convert 'time' column to Date format
# Exploratory Data Analysis (EDA)
# Visualize trends and patterns in the stock prices over time
ggplot(data, aes(x = time, y = close, color = Company)) +
geom_line() +
labs(title = "Stock Price Trends Over Time", x = "Time", y = "Close Price") +
facet_wrap(~Company, scales = "free_y")
```{r, echo = TRUE}
# Load the sample dataset
data <- read.csv('Tech_data.csv')
# Load the sample dataset
data <- read.csv('Tech_data.csv')
data.head()
data
# Preprocess the data (if needed)
data$time <- as.Date(data$time)  # Convert 'time' column to Date format
# Select features for clustering (e.g., closing price)
features <- select(data, close)
# Select features for clustering (e.g., closing price)
cluster_features <- select(data, open, high, low, close)
# Select features for clustering (e.g., closing price)
features <- select(data, open, high, low, close)
# Select features for clustering (e.g., closing price)
features <- dplyr::select(data, open, high, low, close)
# Standardize the features
scaled_features <- scale(features)
# Apply K-means clustering
k <- 3  # Number of clusters
kmeans_result <- kmeans(scaled_features, centers=k)
# Add cluster labels to the dataset
data$Cluster <- as.factor(kmeans_result$cluster)
# Visualize the clustering result
ggplot(data, aes(x=Year, y=close, color=Cluster)) +
geom_point() +
labs(title="K-means Clustering of Stock Price Time Series", x="Year", y="Close Price")
# Visualize the clustering result
ggplot(data, aes(x = time, y = close, color = Cluster)) +
geom_line() +
labs(title = "K-means Clustering of Stock Price Time Series", x = "Time", y = "Close Price") +
facet_wrap(~Company, scales = "free_y")
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(forecast)
# Load the sample dataset
data <- read.csv('Tech_data.csv')
data
# Preprocess the data (if needed)
data$time <- as.Date(data$time)  # Convert 'time' column to Date format
# Select features for clustering (e.g., closing price)
features <- dplyr::select(data, open, high, low, close)
# Standardize the features
scaled_features <- scale(features)
# Apply K-means clustering
k <- 3  # Number of clusters
kmeans_result <- kmeans(scaled_features, centers=k)
# Add cluster labels to the dataset
data$Cluster <- as.factor(kmeans_result$cluster)
# Visualize the clustering result
ggplot(data, aes(x = time, y = close, color = Cluster)) +
geom_line() +
labs(title = "K-means Clustering of Stock Price Time Series", x = "Time", y = "Close Price") +
facet_wrap(~Company, scales = "free_y")
# Time Series Forecasting (Exponential Smoothing)
# Split data into training and test sets
train_end <- as.Date("1999-11-01")  # Training data until November 1999
test_start <- as.Date("1999-12-01")  # Test data from December 1999 onwards
# Time Series Forecasting (Exponential Smoothing)
# Split data into training and test sets
train_end <- as.Date("1999-11-01")  # Training data until November 1999
test_start <- as.Date("1999-12-01")  # Test data from December 1999 onwards
train <- window(ts_data, end = train_end)
# Time Series Forecasting (Exponential Smoothing)
# Convert 'time' column to Date format
data$time <- as.Date(data$time)
# Prepare time series data
ts_data <- ts(data$close, frequency = 1)  # Assuming monthly frequency
# Split data into training and test sets
train_end <- as.Date("1999-11-01")  # Training data until November 1999
test_start <- as.Date("1999-12-01")  # Test data from December 1999 onwards
train <- window(ts_data, end = train_end)
# Split data into training and test sets
train_end <- as.Date("1999-11-01")  # Training data until November 1999
test_start <- as.Date("1999-12-01")  # Test data from December 1999 onwards
train <- window(ts_data, end = as.numeric(train_end))
test <- window(ts_data, start = as.numeric(test_start))
# Perform exponential smoothing
forecast_model <- ets(train)
# Generate forecasts
forecast_values <- forecast(forecast_model, h=length(test))
forecast_values
# Plot forecasts
autoplot(forecast_values) +
autolayer(ts_data, series = "Actual") +
xlab("Year") + ylab("Close Price") +
ggtitle("Exponential Smoothing Forecasting")
# Plot forecasts
autoplot(forecast_values) +
autolayer(fitted(forecast_model), series = "Predicted") +
autolayer(test, series = "Actual") +
xlab("Time") + ylab("Close Price") +
ggtitle("Exponential Smoothing Forecasting")
